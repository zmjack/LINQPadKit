// <auto-generated/>
using LINQPad;

namespace LINQPadKit
{
    public partial class TileMap
    {
        public static void Import()
        {
            Util.HtmlHead.AddStyles("""
.tile-map {
    position: relative;
}

.tile-map-sprite {
    position: absolute;
    box-sizing: border-box;
    border: 1px solid orange;
    padding: 10px;
    text-align: center;
}
"""
            );

            Util.HtmlHead.AddScript("""
// #region Drawing
var Position2D = /** @class */ (function () {
    function Position2D(x, y) {
        this.x = x;
        this.y = y;
    }
    return Position2D;
}());
var Size = /** @class */ (function () {
    function Size(width, height) {
        this.width = width;
        this.height = height;
    }
    return Size;
}());
// #endregion

// #region HybridCanvas
/// <reference path="./Drawing.ts" />
var DrawingOptions = /** @class */ (function () {
    function DrawingOptions() {
    }
    return DrawingOptions;
}());
var HybridCanvas = /** @class */ (function () {
    function HybridCanvas() {
        this.element_sprites = [];
    }
    Object.defineProperty(HybridCanvas.prototype, "size", {
        set: function (value) {
            this.element_canvas.width = value.width;
            this.element_canvas.height = value.height;
        },
        enumerable: false,
        configurable: true
    });
    HybridCanvas.prototype.render = function (element) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.element = element;
        this.element.className = this.classNames.graph;
        this.element_sprites_container = this.element.getElementsByClassName(this.classNames.sprites_container)[0];
        if (this.element_sprites_container == null) {
            var container = document.createElement('div');
            container.className = this.classNames.sprites_container;
            this.element.appendChild(container);
            this.element_sprites_container = container;
        }
        this.element_canvas = this.element.getElementsByTagName("canvas")[0];
        if (this.element_canvas == null) {
            var canvas = document.createElement('canvas');
            this.element.appendChild(canvas);
            this.element_canvas = canvas;
        }
        this.context2D = this.element_canvas.getContext('2d');
        this.refresh.apply(this, params);
    };
    HybridCanvas.prototype.clear = function () {
        this.clearCanvas();
        this.clearSprites();
    };
    HybridCanvas.prototype.clearCanvas = function () {
        this.context2D.clearRect(0, 0, this.element_canvas.width, this.element_canvas.height);
    };
    HybridCanvas.prototype.addSprite = function (sprite, exsist) {
        this.element_sprites.push(sprite);
        if (!exsist)
            this.element_sprites_container.appendChild(sprite);
    };
    HybridCanvas.prototype.clearSprites = function () {
        this.element_sprites_container.innerHTML = '';
        this.element_sprites = [];
    };
    HybridCanvas.prototype.useOptions = function (options) {
        if (options === null || options === void 0 ? void 0 : options.strokeColor) {
            this.context2D.strokeStyle = options.strokeColor;
        }
        if (options === null || options === void 0 ? void 0 : options.fillColor) {
            this.context2D.fillStyle = options.fillColor;
        }
    };
    HybridCanvas.prototype.polygon = function (positions, options) {
        var first = true;
        if (positions.length > 0) {
            this.context2D.beginPath();
            for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
                var pos = positions_1[_i];
                if (first) {
                    this.context2D.moveTo(pos.x, pos.y);
                    first = false;
                }
                else
                    this.context2D.lineTo(pos.x, pos.y);
            }
            this.context2D.closePath();
            this.useOptions(options);
            this.context2D.stroke();
            this.context2D.fill();
        }
    };
    HybridCanvas.prototype.line = function (from, to, options) {
        this.context2D.beginPath();
        this.context2D.moveTo(from.x, from.y);
        this.context2D.lineTo(to.x, to.y);
        this.context2D.closePath();
        this.useOptions(options);
        this.context2D.stroke();
    };
    HybridCanvas.prototype.rectangle = function (lt, rb, options) {
        this.polygon([lt, { x: rb.x, y: lt.y }, rb, { x: lt.x, y: rb.y }], options);
    };
    return HybridCanvas;
}());
// #endregion

// #region TileMap
/// <reference path="../Drawing.ts" />
/// <reference path="../HybridCanvas.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var TileMap = /** @class */ (function (_super) {
    __extends(TileMap, _super);
    function TileMap(tileSize, tileWidth, tileHeight) {
        var _this = _super.call(this) || this;
        _this.tileSize = tileSize;
        _this.tileWidth = tileWidth;
        _this.tileHeight = tileHeight;
        _this.classNames = {
            graph: 'tile-map',
            sprites_container: 'tile-map-sprites',
            sprite: 'tile-map-sprite',
        };
        return _this;
    }
    TileMap.prototype.render = function (element) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        _super.prototype.render.apply(this, __spreadArray([element], params, false));
        var sprites = this.element_sprites_container.getElementsByClassName(this.classNames.sprite);
        for (var i = 0; i < sprites.length; i++) {
            var sprite = sprites[i];
            this.addSprite(sprite, true);
        }
        if (this.element_sprites.length != this.tileHeight * this.tileWidth)
            throw "The length(".concat(this.element_sprites.length, ") of sprites must be ").concat(this.tileHeight * this.tileWidth, ".");
    };
    TileMap.prototype.refresh = function () {
        if (this.element == null)
            throw "Use render before refresh.";
        this.clearCanvas();
        this.size = {
            width: this.tileSize * this.tileWidth,
            height: this.tileSize * this.tileHeight,
        };
        this.drawBackground();
    };
    TileMap.prototype.drawBackground = function () {
        for (var y = 0; y < this.tileHeight; y++) {
            for (var x = 0; x < this.tileWidth; x++) {
                this.rectangle({
                    x: x * this.tileSize,
                    y: y * this.tileSize
                }, {
                    x: (x + 1) * this.tileSize,
                    y: (y + 1) * this.tileSize
                }, {
                    fillColor: (y + x) % 2 == 0 ? '#808080' : '#C0C0C0',
                });
            }
        }
    };
    TileMap.prototype.useMap = function (tileHtmlMap) {
        this.tileHtmlMap = tileHtmlMap;
    };
    TileMap.prototype.loadMap = function (map) {
        if (this.element_sprites.length == 0) {
            for (var y = 0; y < this.tileHeight; y++) {
                for (var x = 0; x < this.tileWidth; x++) {
                    this.addSprite(this.createSprite(), false);
                }
            }
        }
        if (this.element_sprites.length != this.tileHeight * this.tileWidth)
            throw "The length(".concat(this.element_sprites.length, ") of sprites must be ").concat(this.tileHeight * this.tileWidth, ".");
        for (var y = 0; y < this.tileHeight; y++) {
            for (var x = 0; x < this.tileWidth; x++) {
                var div = this.element_sprites[y * this.tileHeight + x];
                var value = map[y] ? map[y][x] : undefined;
                div.innerHTML = value ? this.tileHtmlMap[value] : '';
                div.style['top'] = "".concat(y * this.tileSize, "px");
                div.style['left'] = "".concat(x * this.tileSize, "px");
                div.style['width'] = "".concat(this.tileSize, "px");
                div.style['height'] = "".concat(this.tileSize, "px");
            }
        }
    };
    TileMap.prototype.createSprite = function () {
        var div = document.createElement('div');
        div.className = this.classNames.sprite;
        return div;
    };
    return TileMap;
}(HybridCanvas));
// #endregion
"""
            );
        }
    }
}